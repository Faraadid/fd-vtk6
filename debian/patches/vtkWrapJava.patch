--- a/Wrapping/Tools/vtkWrapJava.c
+++ b/Wrapping/Tools/vtkWrapJava.c
@@ -1251,8 +1251,31 @@
 
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
+
+    /* if a template class is detected add a typedef */
+    if (template_class)
+       fprintf(fp,"typedef %s %s;\n",
+               data->SuperClasses[i], real_superclass);
+
     fprintf(fp,"extern \"C\" JNIEXPORT void* %s_Typecast(void *op,char *dType);\n",
-            data->SuperClasses[i]);
+            real_superclass);
     }
 
   fprintf(fp,"\nextern \"C\" JNIEXPORT void* %s_Typecast(void *me,char *dType)\n{\n",data->Name);
@@ -1264,8 +1287,22 @@
   /* check our superclasses */
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>')
+          real_superclass[c] = '_';
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
+
     fprintf(fp,"  if ((res= %s_Typecast(me,dType)) != NULL)",
-            data->SuperClasses[i]);
+            real_superclass);
     fprintf(fp," { return res; }\n");
     }
   fprintf(fp,"  return NULL;\n");
--- a/Wrapping/Tools/vtkWrapTcl.c
+++ b/Wrapping/Tools/vtkWrapTcl.c
@@ -1115,7 +1115,30 @@
 
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
-    fprintf(fp,"int %sCppCommand(%s *op, Tcl_Interp *interp,\n             int argc, char *argv[]);\n",data->SuperClasses[i],data->SuperClasses[i]);
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
+
+     /* if a template class is detected add a typedef */
+    if (template_class)
+       fprintf(fp,"typedef %s %s;\n",
+               data->SuperClasses[i], real_superclass);
+
+   fprintf(fp,"int %sCppCommand(%s *op, Tcl_Interp *interp,\n             int argc, char *argv[]);\n",real_superclass,real_superclass);
     }
   fprintf(fp,"int VTKTCL_EXPORT %sCppCommand(%s *op, Tcl_Interp *interp,\n             int argc, char *argv[]);\n",data->Name,data->Name);
   fprintf(fp,"\nint %sCommand(ClientData cd, Tcl_Interp *interp,\n             int argc, char *argv[])\n{\n",data->Name);
@@ -1156,8 +1179,25 @@
   /* check our superclasses */
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
     fprintf(fp,"      if (%sCppCommand(static_cast<%s *>(op),interp,argc,argv) == TCL_OK)\n        {\n",
-            data->SuperClasses[i],data->SuperClasses[i]);
+            real_superclass,data->SuperClasses[i]);
     fprintf(fp,"        return TCL_OK;\n        }\n");
     }
   fprintf(fp,"      }\n    return TCL_ERROR;\n    }\n\n");
@@ -1191,8 +1231,25 @@
   /* recurse up the tree */
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
     fprintf(fp,"    %sCppCommand(op,interp,argc,argv);\n",
-            data->SuperClasses[i]);
+            real_superclass);
     }
   /* now list our methods */
   fprintf(fp,"    Tcl_AppendResult(interp,\"Methods from %s:\\n\",NULL);\n",data->Name);
@@ -1256,8 +1313,25 @@
   /* recurse up the tree */
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
     fprintf(fp,"    %sCppCommand(op,interp,argc,argv);\n",
-            data->SuperClasses[i]);
+            real_superclass);
     /* append the result to our string */
     fprintf(fp,"    Tcl_DStringGetResult ( interp, &dStringParent );\n" );
     fprintf(fp,"    Tcl_DStringAppend ( &dString, Tcl_DStringValue ( &dStringParent ), -1 );\n" );
@@ -1290,8 +1364,25 @@
   /* recurse up the tree */
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
     fprintf(fp,"    SuperClassStatus = %sCppCommand(op,interp,argc,argv);\n",
-            data->SuperClasses[i]);
+            real_superclass);
     fprintf(fp,"    if ( SuperClassStatus == TCL_OK ) { return TCL_OK; }\n" );
     }
   /* Now we handle it ourselves */
@@ -1429,8 +1520,25 @@
   /* try superclasses */
   for (i = 0; i < data->NumberOfSuperClasses; i++)
     {
+    /* try to find if data->SuperClasses[i] is a template */
+    int template_class = 0;
+    int l = strlen(data->SuperClasses[i]);
+    char * real_superclass = (char*) malloc(l+1);
+    memcpy(real_superclass, data->SuperClasses[i], l+1);
+
+    int c=0;
+    for (c=0; c<l; c++)
+    {
+       char p = data->SuperClasses[i][c];
+       if (p == '<' || p == '>'){
+          real_superclass[c] = '_';
+	  template_class = 1;
+       }
+       if  (p == ',' || p == ' ')
+          real_superclass[c] = '_';
+    }
     fprintf(fp,"\n  if (%sCppCommand(static_cast<%s *>(op),interp,argc,argv) == TCL_OK)\n",
-            data->SuperClasses[i], data->SuperClasses[i]);
+            real_superclass, data->SuperClasses[i]);
     fprintf(fp,"    {\n    return TCL_OK;\n    }\n");
     }
 
